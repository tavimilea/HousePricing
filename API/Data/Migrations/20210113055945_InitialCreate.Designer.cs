// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dbtest;

namespace API.Data.Migrations
{
    [DbContext(typeof(HouseDatabase))]
    [Migration("20210113055945_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("API.Entities.EstimationRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<float>("Condition")
                        .HasColumnType("REAL");

                    b.Property<float>("Floors")
                        .HasColumnType("REAL");

                    b.Property<float>("Grade")
                        .HasColumnType("REAL");

                    b.Property<int?>("ReportFk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReportFk")
                        .IsUnique();

                    b.ToTable("Requests");
                });

            modelBuilder.Entity("API.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<int?>("ReportFk")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Token")
                        .HasColumnType("TEXT");

                    b.Property<string>("Username")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ReportFk")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("dbtest.House", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("Bathrooms")
                        .HasColumnType("REAL");

                    b.Property<double>("Bedrooms")
                        .HasColumnType("REAL");

                    b.Property<double>("Condition")
                        .HasColumnType("REAL");

                    b.Property<double>("Date")
                        .HasColumnType("REAL");

                    b.Property<double>("Floors")
                        .HasColumnType("REAL");

                    b.Property<double>("Grade")
                        .HasColumnType("REAL");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<double>("Sqft_above")
                        .HasColumnType("REAL");

                    b.Property<double>("Sqft_basement")
                        .HasColumnType("REAL");

                    b.Property<double>("Sqft_living")
                        .HasColumnType("REAL");

                    b.Property<double>("Sqft_living15")
                        .HasColumnType("REAL");

                    b.Property<double>("Sqft_lot")
                        .HasColumnType("REAL");

                    b.Property<double>("Sqft_lot15")
                        .HasColumnType("REAL");

                    b.Property<double>("View")
                        .HasColumnType("REAL");

                    b.Property<double>("Waterfront")
                        .HasColumnType("REAL");

                    b.Property<double>("Yr_built")
                        .HasColumnType("REAL");

                    b.Property<double>("Yr_renovated")
                        .HasColumnType("REAL");

                    b.Property<double>("Zipcode")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.ToTable("Houses");
                });

            modelBuilder.Entity("API.Entities.EstimationRequest", b =>
                {
                    b.HasOne("API.Entities.Report", "Report")
                        .WithOne("Request")
                        .HasForeignKey("API.Entities.EstimationRequest", "ReportFk");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("API.Entities.User", b =>
                {
                    b.HasOne("API.Entities.Report", "Report")
                        .WithOne("User")
                        .HasForeignKey("API.Entities.User", "ReportFk");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("API.Entities.Report", b =>
                {
                    b.Navigation("Request");

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
